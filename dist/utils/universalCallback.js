"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const u=require("../supabase-3d35f6ac.js"),n=require("./authRedirect.js");function g(){const l=()=>{const e=window.location.hash,a=window.location.pathname,o=window.location.search;return e.includes("access_token=")||e.includes("refresh_token=")||o.includes("access_token=")||o.includes("refresh_token=")||a.includes("/auth/callback")||e.includes("#/auth/callback")},d=async e=>{const a=e.user;console.log("[UniversalCallback] OAuth login successful:",a.email),e.access_token&&n.setSessionCookie(n.ACCESS_COOKIE,e.access_token),e.refresh_token&&n.setSessionCookie(n.REFRESH_COOKIE,e.refresh_token),n.syncCookiesToLocalStorage();const o=n.getPostLoginBase();console.log("[UniversalCallback] Post-login redirect URL:",o),console.log("[UniversalCallback] Session storage redirect:",sessionStorage.getItem("post-login-redirect")),console.log("[UniversalCallback] Local storage redirect:",localStorage.getItem("post-login-redirect"));const s=o||"/";return console.log("[UniversalCallback] Final redirect URL:",s),sessionStorage.removeItem("post-login-redirect"),localStorage.removeItem("post-login-redirect"),setTimeout(()=>{if(s.startsWith("/")){const t=`${window.location.origin}${s}`;console.log("[UniversalCallback] redirecting to:",t),window.location.href=t}else console.log("[UniversalCallback] redirecting to absolute URL:",s),window.location.href=s},100),!0},i=async()=>{if(!l())return!1;console.log("[UniversalCallback] Processing OAuth callback..."),console.log("[UniversalCallback] Current URL:",window.location.href),console.log("[UniversalCallback] Current hash:",window.location.hash);try{await new Promise(r=>setTimeout(r,500));const{data:e,error:a}=await u.supabase.auth.getSession();if(!(e!=null&&e.session)&&(window.location.hash.includes("access_token=")||window.location.search.includes("access_token="))){console.log("[UniversalCallback] No session found, trying to process URL tokens...");const{data:r,error:t}=await u.supabase.auth.getUser();if(r!=null&&r.user&&!t){console.log("[UniversalCallback] Successfully processed URL tokens for user:",r.user.email);const{data:c,error:k}=await u.supabase.auth.getSession();if(c!=null&&c.session)return console.log("[UniversalCallback] Session established after URL processing"),d(c.session)}}const{data:o,error:s}={data:e,error:a};return s?(console.error("[UniversalCallback] Error processing callback:",s),!1):o!=null&&o.session?await d(o.session):(console.log("[UniversalCallback] No session found"),!1)}catch(e){return console.error("[UniversalCallback] Error processing callback:",e),!1}};return typeof window<"u"&&(l()&&i(),window.addEventListener("hashchange",()=>{l()&&i()})),{isOAuthCallback:l,processCallback:i}}typeof window<"u"&&g();exports.setupUniversalCallback=g;
