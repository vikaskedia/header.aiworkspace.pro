"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});function k(){const n=()=>{const e=window.location.hash,a=window.location.pathname,s=window.location.search;return e.includes("access_token=")||e.includes("refresh_token=")||s.includes("access_token=")||s.includes("refresh_token=")||a.includes("/auth/callback")||e.includes("#/auth/callback")},g=async e=>{const a=e.user;console.log("[UniversalCallback] OAuth login successful:",a.email),e.access_token&&setSessionCookie(ACCESS_COOKIE,e.access_token),e.refresh_token&&setSessionCookie(REFRESH_COOKIE,e.refresh_token),syncCookiesToLocalStorage();const s=getPostLoginBase();console.log("[UniversalCallback] Post-login redirect URL:",s),console.log("[UniversalCallback] Session storage redirect:",sessionStorage.getItem("post-login-redirect")),console.log("[UniversalCallback] Local storage redirect:",localStorage.getItem("post-login-redirect"));const r=s||"/";return console.log("[UniversalCallback] Final redirect URL:",r),sessionStorage.removeItem("post-login-redirect"),localStorage.removeItem("post-login-redirect"),setTimeout(()=>{if(r.startsWith("/")){const u=`${window.location.origin}${r}`;console.log("[UniversalCallback] redirecting to:",u),window.location.href=u}else console.log("[UniversalCallback] redirecting to absolute URL:",r),window.location.href=r},100),!0},c=async()=>{if(!n())return!1;console.log("[UniversalCallback] Processing OAuth callback..."),console.log("[UniversalCallback] Current URL:",window.location.href),console.log("[UniversalCallback] Current hash:",window.location.hash);try{const{supabase:e}=await Promise.resolve().then(()=>require("../supabase-f6e2692f.js")).then(o=>o.supabase$1),{setSessionCookie:a,syncCookiesToLocalStorage:s,ACCESS_COOKIE:r,REFRESH_COOKIE:C,getPostLoginBase:u}=await Promise.resolve().then(()=>require("./authRedirect.js"));await new Promise(o=>setTimeout(o,500));const{data:l,error:h}=await e.auth.getSession();if(!(l!=null&&l.session)&&(window.location.hash.includes("access_token=")||window.location.search.includes("access_token="))){console.log("[UniversalCallback] No session found, trying to process URL tokens...");const{data:o,error:f}=await e.auth.getUser();if(o!=null&&o.user&&!f){console.log("[UniversalCallback] Successfully processed URL tokens for user:",o.user.email);const{data:i,error:w}=await e.auth.getSession();if(i!=null&&i.session)return console.log("[UniversalCallback] Session established after URL processing"),g(i.session)}}const{data:t,error:d}={data:l,error:h};return d?(console.error("[UniversalCallback] Error processing callback:",d),!1):t!=null&&t.session?await g(t.session):(console.log("[UniversalCallback] No session found"),!1)}catch(e){return console.error("[UniversalCallback] Error processing callback:",e),!1}};return typeof window<"u"&&(n()&&c(),window.addEventListener("hashchange",()=>{n()&&c()})),{isOAuthCallback:n,processCallback:c}}typeof window<"u"&&k();exports.setupUniversalCallback=k;
